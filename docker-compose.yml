version: '3.3'

services:
  api:
    build:
      context: ./
      dockerfile: ./docker/api/Dockerfile
    ports:
      - "8000:80"
    volumes:
      - ./:/code
    environment:
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_DRIVER: ${DB_DRIVER}
      TEST_DB_NAME: ${TEST_DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost/health/ || exit 1
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 1s
    depends_on:
      mssql:
        condition: service_healthy
    restart: "no"

  # frontend:
  #   build:
  #     context: ./
  #     dockerfile: ./docker/frontend/Dockerfile
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     REACT_APP_RELEASE_VERSION: 'omgevingsbeleid@1.0.0'
  #     REACT_APP_API_URL: 'http://localhost:8888/v0.1'
  #     REACT_APP_API_ENV: 'dev'
  #     REACT_APP_KEY_API_ACCESS_TOKEN: 'OB_access_token'
  #     REACT_APP_KEY_IDENTIFIER: 'OB_identifier'
  #     REACT_APP_ERROR_MSG: 'Er is iets misgegaan, probeer het later nog eens'
  #     REACT_APP_KEY_WELCOME_POPUP: 'OB_welkom_popup'
  #     FRONTEND_BRANCH: "${FRONTEND_BRANCH}"
  #     PZH_FONTAWESOME_SECRET: "${PZH_FONTAWESOME_SECRET}"
  #   healthcheck:
  #     test: wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1
  #     interval: 5s
  #     timeout: 3s
  #     retries: 30
  #     start_period: 1s
  #   depends_on:
  #     - api
  #   restart: "no"

  mssql:
    image: reynier3mil/centos-mssql-full
    ports:
      - "11433:1433"
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: 'Passw0rd'
    volumes:
      - mssql:/var/opt/mssql
      - ./docker/mssql/:/opt/sql/:ro
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P Passw0rd -Q "SELECT 1" -b -o /dev/null
      interval: 1s
      timeout: 3s
      retries: 10
      start_period: 1s
    restart: "no"

  arangodb:
    image: arangodb
    ports:
      - "8529:8529"
    environment:
      ARANGO_NO_AUTH: 1
    volumes:
      - arangodb:/var/lib/arangodb3
    restart: "no"

  nginx:
    image: nginx:1.21
    ports:
      - "8888:80"
    volumes:
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
    depends_on:
      api:
        condition: service_healthy
      # frontend:
      #   condition: service_healthy
    restart: "no"

  # geoserver:
  #   image: kartoza/geoserver:2.20.3
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - geoserver:/opt/geoserver/data_dir
  #     - ./docker/geoserver/workspaces:/opt/geoserver/data_dir/workspaces
  #   environment:
  #     # Note: See https://github.com/kartoza/docker-geoserver#activate-stable-plugins-during-contain-startup
  #     # for more extensions and how to use them
  #     STABLE_EXTENSIONS: sqlserver-plugin
  #     TOMCAT_USER: admin
  #     TOMCAT_PASSWORD: password
  #     GEOSERVER_ADMIN_USER: admin
  #     GEOSERVER_ADMIN_PASSWORD: password
  #   depends_on:
  #     mssql:
  #       condition: service_healthy
  #   healthcheck:
  #     test: curl --fail -s http://localhost:8080/ || exit 1
  #     interval: 1m30s
  #     timeout: 10s
  #     retries: 3
  #   restart: "no"

volumes:
  mssql:
  geoserver:
  arangodb:
